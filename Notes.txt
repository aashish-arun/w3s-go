Go
    It is one of the popular programming language

Structure 
    A module is made up of many go packeages

    A package is made up of many go files

    A Go file consists of the following parts:
        Package declaration
        Import packages
        Functions
        Statements and expressions

Comments

    Single line 
        // {your comment}

    Multi line
        /* {
            your comment
            your comment
            your comment
            } 
        */

Variables

    Variable Types
        1. int - stores integer numbers
        2. float32 - stores floating point number
        3. string - stores text
        4. bool - stores value with two state: true or false

    Declaring (Creating) Variables
        Ways to declare a variable
            1. With the var keyword:
                Syntax
                    var variablename type = value

                Note You always have to specify either type or value (or both).

            2. With the := sign:
                Syntax
                    var variablename := value
                        or
                    variablename := value
                Note: In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value). It is not possible to declare a variable using :=, without assigning a value to it.

        Ways to declare  multiple variables
            1. Multiple Variable Declaration
                a. If you use the type keyword, it is only possible to declare one type of variable per line.
                    func main() {
                        var varible1, varible2, varible3, varible4 {variable_type} = value1, value2, value3, value4
                    }

                b. If the type keyword is not specified, you can declare different types of variables in the same line:
                    func main() {
                        var a, b = 6, "Hello"
                        c, d := 7, "World!"
                    }

            2. Variable Declaration in a Block
                func main() {
                    var (
                        a int
                        b int = 1
                        c string = "hello"
                    )
                }

    Variable Naming Conventions
        A variable name must start with a letter (a-z, A-Z) or an underscore character (_)
        A variable name cannot start with a digit (0-9)
        A variable name can only contain alpha-numeric characters (a-z, A-Z, 0-9) and underscores (_)
        Variable names are case-sensitive (a-z)
        There is no limit on the length of the variable name
        A variable name cannot contain spaces
        The variable name cannot be any Go keywords

    Multi-Word Variable Naming Conventions

        Camel Case
            Each word, except the first, starts with a capital letter

        Pascal Case
            Each word starts with a capital letter

        Snake Case
            Each word is separated by an underscore character

Constants
    They are unchangeable and read-only variables.
    
    Syntax
        const CONSTNAME type = value

    Note: The value of a constant must be assigned when you declare it.

    Constant Types
        1. Typed constants
            They are declared with a defined type
        2. Untyped constants 
            They are declared without a type and the type of the constant is inferred from the value 

    Constant Naming Conventions
        Follow same same naming conventions as variables
        They are usually written in uppercase letters
        They can be declared both inside and outside of a function

    Multiple Constants Declaration
        const (
        A int = 1
        B = 3.14
        C = "Hi!"
        )
    
Output Functions
    1. Print()
        Prints its arguments with their default format.

    2. Println()
        Prints its arguments with a whitespace between the arguments, and a newline at the end.
        
    3. Printf()
        First formats its argument based on the given formatting verb and then prints them.
    
        General Formatting verbs
            %v	- Prints the value in the default format
            %#v	- Prints the value in Go-syntax format
            %T	- Prints the type of the value
            %%	- Prints the % sign
        
        Integer Formatting Verbs

            %b	Base 2
            %d	Base 10
            %+d	Base 10 and always show sign
            %o	Base 8
            %O	Base 8, with leading 0o
            %x	Base 16, lowercase
            %X	Base 16, uppercase
            %#x	Base 16, with leading 0x
            %4d	Pad with spaces (width 4, right justified)
            %-4d	Pad with spaces (width 4, left justified)
            %04d	Pad with zeroes (width 4

        String Formatting Verbs

            %s	Prints the value as plain string
            %q	Prints the value as a double-quoted string
            %8s	Prints the value as plain string (width 8, right justified)
            %-8s	Prints the value as plain string (width 8, left justified)
            %x	Prints the value as hex dump of byte values
            % x	Prints the value as hex dump with spaces

        Boolean Formatting Verbs
            %t	Value of the boolean operator in true or false format (same as using %v)

        Float Formatting Verbs
            %e	Scientific notation with 'e' as exponent
            %f	Decimal point, no exponent
            %.2f	Default width, precision 2
            %6.2f	Width 6, precision 2
            %g	Exponent as needed, only necessary digits

Data Types
    Boolean: represents a boolean value and is either true or false
        Can only take values of true or false (Default).

    Numeric: represents integer types, floating point values, and complex types
        
        Intergers
            Signed Integers

                declared with one of the int keywords, can store both positive and negative values

                Go has five keywords/types of signed integers

                    int (-2147483648 to 2147483647 in 32 bit system and -9223372036854775808 to 9223372036854775807 in 64 bit system)

                    int8 (-128 to 127)

                    int16 (-32768 to 32767)

                    int32 (-2147483648 to 2147483647)

                    int64 (-9223372036854775808 to 9223372036854775807)

            Unsigned Integers

                Unsigned integers, declared with one of the uint keywords, can only store non-negative values:
                
                Go has five keywords/types of unsigned integers
                    uint (0 to 4294967295 in 32 bit systems and
                    0 to 18446744073709551615 in 64 bit systems)

                    uint8 (0 to 255)

                    uint16 (0 to 65535)

                    uint32 (0 to 4294967295)

                    uint64 (0 to 18446744073709551615)

        Float
            The float data types are used to store positive and negative numbers with a decimal point

            The float data type has two keywords:
            
                float32 (-3.4e+38 to 3.4e+38.)
                float64 (-1.7e+308 to +1.7e+308.) (default)

    String: represents a sequence of characters. They must be surrounded by double quotes

Arrays
    It is used to store multiple values of the same type in a single variable, instead of declaring separate variables for each value.

    Two ways to declare an Array
    
        1. With the var keyword:
            Syntax
                var array_name = [length]datatype{values} // here length is defined

                or

                var array_name = [...]datatype{values} // here length is inferred

        2. With the := sign:
            Syntax
                array_name := [length]datatype{values} // here length is defined

                or

                array_name := [...]datatype{values} // here length is inferred

        Note: The length specifies the number of elements to store in the array. In Go, arrays have a fixed length. The length of the array is either defined by a number or is inferred (means that the compiler decides the length of the array, based on the number of values).

    Access Elements of an Array
        You can access a specific array element by referring to the index number.

        In Go, array indexes start at 0. That means that [0] is the first element, [1] is the second element, etc.

    Change Elements of an Array
        You can also change the value of a specific array element by referring to the index number.

    Array Initialization
        If an array or one of its elements has not been initialized in the code, it is assigned the default value of its type.

        The default value for int is 0, and the default value for string is "".
    
    Initialize Only Specific Elements
        It is possible to initialize only specific elements in an array.
    
    Find the Length of an Array
        The len() function is used to find the length of an array

Slices






Note
    1. \n creates new lines.